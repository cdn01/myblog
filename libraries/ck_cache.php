<?php if ( ! defined('CK_ABSPATH')) exit('No direct script access allowed');
 

interface icache_saver
{
	/**
	 +----------------------------------------------------------
	 * 获取缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	array
	 +----------------------------------------------------------
	 */
	function get($cache_key);

	/**
	 +----------------------------------------------------------
	 * 更新缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	array $cache_value
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function set($cache_key, $cache_value);
	
	/**
	 +----------------------------------------------------------
	 * 自增长缓存
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	int $count
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function incr($cache_key, $count = 1);
	
	/**
	 +----------------------------------------------------------
	 * 自减少缓存
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	int $count
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function decr($cache_key, $count = 1);
	
	/**
	 +----------------------------------------------------------
	 * 模糊匹配缓存的数量
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	int
	 +----------------------------------------------------------
	 */
	function count($cache_key);

	/**
	 +----------------------------------------------------------
	 * 删除缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function delete($cache_key);
	
	/**
	 +----------------------------------------------------------
	 * 关闭缓存链接
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function close();
}

class ck_redis implements icache_saver
{
	/**
	 +----------------------------------------------------------
	 * 获取缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	array
	 +----------------------------------------------------------
	 */
	function get($cache_key)
	{
		return json_decode(ck_blog::get_instance()->redis()->get($cache_key), true);
	}

	/**
	 +----------------------------------------------------------
	 * 更新缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	array $cache_value
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function set($cache_key, $cache_value)
	{
		return ck_blog::get_instance()->redis()->set($cache_key, json_encode($cache_value));
	}
	
	/**
	 +----------------------------------------------------------
	 * 自增长缓存
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	int $count
	 +----------------------------------------------------------
	 * @return	int
	 +----------------------------------------------------------
	 */
	function incr($cache_key, $count = 1)
	{
		return ck_blog::get_instance()->redis()->incrBy($cache_key, $count);
	}
	
	/**
	 +----------------------------------------------------------
	 * 自减少缓存
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	int $count
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function decr($cache_key, $count = 1)
	{
		return ck_blog::get_instance()->redis()->decrBy($cache_key, $count);
	}
	
	/**
	 +----------------------------------------------------------
	 * 模糊匹配缓存键的数量
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	int
	 +----------------------------------------------------------
	 */
	function count($cache_key)
	{
		return count(ck_blog::get_instance()->redis()->keys($cache_key));
	}

	/**
	 +----------------------------------------------------------
	 * 删除缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function delete($cache_key)
	{
		return ck_blog::get_instance()->redis()->delete($cache_key);
	}
	
	/**
	 +----------------------------------------------------------
	 * 关闭缓存链接
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function close()
	{
		return ck_blog::get_instance()->redis()->close();
	}
}

class ck_memcached implements icache_saver
{
	/**
	 +----------------------------------------------------------
	 * 获取缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	array
	 +----------------------------------------------------------
	 */
	function get($cache_key)
	{
		return ck_blog::get_instance()->memcached()->get($this->_key($cache_key));
	}

	/**
	 +----------------------------------------------------------
	 * 更新缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	array $cache_value
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function set($cache_key, $cache_value)
	{
		return ck_blog::get_instance()->memcached()->set($this->_key($cache_key), $cache_value);
	}
	
	/**
	 +----------------------------------------------------------
	 * 自增长缓存
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	int $count
	 +----------------------------------------------------------
	 * @return	int
	 +----------------------------------------------------------
	 */
	function incr($cache_key, $count = 1)
	{
		return ck_blog::get_instance()->memcached()->increment($this->_key($cache_key), $count);
	}
	
	/**
	 +----------------------------------------------------------
	 * 自减少缓存
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 * @param	int $count
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function decr($cache_key, $count = 1)
	{
		return ck_blog::get_instance()->memcached()->decrement($this->_key($cache_key), $count);
	}
	
	/**
	 +----------------------------------------------------------
	 * 模糊匹配缓存键的数量
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	int
	 +----------------------------------------------------------
	 */
	function count($cache_key)
	{
		return 100;
	}

	/**
	 +----------------------------------------------------------
	 * 删除缓存信息
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function delete($cache_key)
	{
		return ck_blog::get_instance()->memcached()->delete($this->_key($cache_key));
	}

	/**
	 +----------------------------------------------------------
	 * 缓存键名
	 +----------------------------------------------------------
	 * @param	string $cache_key
	 +----------------------------------------------------------
	 * @return	string
	 +----------------------------------------------------------
	 */
	function _key($cache_key)
	{
		return "myblog:{$cache_key}";
	}
	
	/**
	 +----------------------------------------------------------
	 * 关闭缓存链接
	 +----------------------------------------------------------
	 * @return	boolean
	 +----------------------------------------------------------
	 */
	function close()
	{
		return ck_blog::get_instance()->memcached()->quit();
	}
}


/* End of file ck_cache.php */
/* Location: ./libraries/ck_cache.php */